Prompt 1:
---------

Consider the following functions given as JSON documents

{ "function": "get_files_from_drive_folder", "parameters": { "drive_service": "which service to use - one of google or onedrive", "api_key": "the unique API key to use to access the drive store", "file_glob": "a pattern for mathcing against and selecting files", "folder_name": "the folder path on the drive to access", "storage_folder": "the location locally to place the given files"}, "description": "this function uses a file matching pattern to select and return all files that match from a given folder path on a cloud based storage drive of a given type"}

{"function": "screen_scrape_abstract", "parameters": {"file_name": "pattern describing a single file", "folder": "the path to the file", "link": "URL for a file", "store_file": "the path to a file to store the abstract"}, "description": "this functions obtains either a file from a given folder or from a URL link then scrapes it in order to extract the abstract which is then placed in a storage file"}

Respond only with an OK


Prompt 2:
---------

We want to obtain two files ("first.pdf" and "second.pdf") from google drive to be stored in the local folder "my_files". We then want to screen scrape each file and place the results in two to be stored files. Use the functions you know about to achieve this. GIve the result as a set of instructions using these functions in a single JSON document. we want the remote folder path and the output result folder to be my_files as with the screen scraping calls but not necessarily the input folder path.


Sample Result:
==============

{
  "instructions": [
    {
      "function": "get_files_from_drive_folder",
      "parameters": {
        "drive_service": "google",
        "api_key": "<YOUR_API_KEY>",
        "file_glob": "first.pdf|second.pdf",
        "folder_name": "my_files",
        "storage_folder": "my_files"
      },
      "description": "Fetches the files 'first.pdf' and 'second.pdf' from the folder 'my_files' on Google Drive and stores them locally in 'my_files'."
    },
    {
      "function": "screen_scrape_abstract",
      "parameters": {
        "file_name": "first.pdf",
        "folder": "my_files",
        "link": null,
        "store_file": "my_files/first_abstract.txt"
      },
      "description": "Extracts the abstract from 'first.pdf' located in 'my_files' and stores the result in 'my_files/first_abstract.txt'."
    },
    {
      "function": "screen_scrape_abstract",
      "parameters": {
        "file_name": "second.pdf",
        "folder": "my_files",
        "link": null,
        "store_file": "my_files/second_abstract.txt"
      },
      "description": "Extracts the abstract from 'second.pdf' located in 'my_files' and stores the result in 'my_files/second_abstract.txt'."
    }
  ]
}


This has been tested with ChatGPT 4o (not even o3), with the assistant playground in the OpenAI API with GPT 4o, and Google Gemini 1.5 Pro (not even Gemini 2.0). It produces something similar in each case.



